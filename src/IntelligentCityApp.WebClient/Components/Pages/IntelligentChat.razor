@page "/webchat"
@rendermode InteractiveServer
@using BlazorBootstrap
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Intelligent Chat</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>Intelligent Chat</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="userInput" class="form-label">Question:</label>
                        <input id="userInput" type="text" class="form-control" @bind="userInput" placeholder="Type your question here..." />
                    </div>
                    <button class="btn btn-primary w-100" @onclick="Send" disabled="@(!IsConnected)">Send</button>
                </div>
            </div>
            <hr />
            <div class="card mt-3">
                <div class="card-header bg-secondary text-white">
                    <h6>Message</h6>
                </div>
                <div class="card-body">
                    <Markdown>@message</Markdown>                    
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IHttpClientFactory? factory { get; set; }
    private HttpClient ProcessClient { get; set; }

    private HubConnection? hubConnection;
    private string? message;
    private string? userInput;

    protected override async Task OnInitializedAsync()
    {        
        ProcessClient = factory!.CreateClient("process-orchestrator-api");
        var baseUri = Environment.GetEnvironmentVariable("services__process-orchestrator__https__0");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(new Uri(baseUri), "/pfevents"))
            .Build();

        hubConnection.On<string>("ReceivePFEvents", async (message) =>
        {
            this.message = message;
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        var response = await ProcessClient.GetAsync($"/city-agents-orchestration?UserRequest={userInput}");
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}